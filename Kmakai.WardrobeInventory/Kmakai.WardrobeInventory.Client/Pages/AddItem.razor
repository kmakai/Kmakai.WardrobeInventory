@page "/new-item"
@page "/edit-item/{id}"
@rendermode InteractiveWebAssembly
@inject HttpClient client
@inject NavigationManager navigationManager


<div class="d-flex flex-column-reverse flex-md-row gap-10 p-3">

    <EditForm OnSubmit="() => (string.IsNullOrEmpty(Id) ? submit() : update())" class="d-flex flex-column gap-2" style="min-width: 50%;" Model="WardrobeItem">

        <div class="mb-3">
            <button type="button" class="bg-white border border-3 rounded-3 @(selectedType == ItemType.Top ? "border-success" : "border-danger")"
                    style="height: 100px; width: 100px;"
                    @onclick="() => SetSelected(ItemType.Top)">
                <img src="images/soutline.jpg" alt="shirt" class="w-100 h-100" />

            </button>
            <button type="button" class="bg-white border border-3 rounded-3 @(selectedType == ItemType.Bottom ? "border-success" : "border-danger")"
                    style="height: 100px; width: 100px;"
                    @onclick="() => SetSelected(ItemType.Bottom)">
                <img src="images/poutline.jpg" alt="shirt" class="w-100 h-100" />
            </button>
            <button type="button" class="bg-white border border-3 rounded-3 @(selectedType == ItemType.Footwear ? "border-success" : "border-danger")"
                    style="height: 100px; width: 100px;"
                    @onclick="() => SetSelected(ItemType.Footwear)">
                <img src="images/shoutline.jpg" alt="shirt" class="w-100 h-100" />
            </button>
        </div>
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <input type="text" class="form-control" id="name" placeholder="cool jeans" @bind="WardrobeItem.Name">
        </div>
        <div class="mb-3">
            <label for="color" class="form-label">Color</label>
            <input type="text" class="form-control" id="color" placeholder="blue" @bind="WardrobeItem.Color">
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" id="description" rows="3" @bind="WardrobeItem.Description"></textarea>
        </div>

        <InputFile OnChange="@SelectFile" multiple="false" accept="image/*" class="form-control">
            <label for="fileInput">Select Image</label>
        </InputFile>


        <div class="mb-3 w-100">
            @if (!string.IsNullOrEmpty(Id))
            {
                <button type="submit" class="btn btn-primary mt-3">Update</button>
            }
            else
            {
                <button type="submit" class="btn btn-primary mt-3" >Submit</button>
            }

        </div>

        <NavLink class="nav-link" href="/">Back to Home</NavLink>



    </EditForm>

    @if (imageSrc != "")
    {
        <div style="min-width: 50%;" class="text-center mb-2">
            <p>Image preview</p>
            <img src="@imageSrc" alt="image" class="w-75" />

        </div>
    }

</div>

@code {
    [Parameter]
    public string Id { get; set; } = "";



    private WardrobeItem WardrobeItem { get; set; } = new WardrobeItem();
    ItemType? selectedType = null!;
    string imageSrc = "";

    private void SetSelected(ItemType itemType)
    {
        selectedType = itemType;
        WardrobeItem.ItemType = itemType;
    }

    private IBrowserFile? selectedFile;

    private async Task SelectFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        var buffer = new byte[selectedFile.Size];
        var bytesRead = await selectedFile.OpenReadStream().ReadAsync(buffer);

        if (bytesRead != buffer.Length)
        {
            Console.WriteLine("Error reading file");
            return;
        }

        var imageData = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
        imageSrc = imageData;
    }

    private async Task<WardrobeItem?> GetItem()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var response = await client.GetFromJsonAsync<WardrobeItem>($"https://localhost:7103/api/wardrobe/item/{Id}");
            if (response != null)
            {
                return response;
            }
        }

        return null;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            WardrobeItem = await GetItem() ?? new WardrobeItem();
            selectedType = WardrobeItem.ItemType;
            imageSrc = WardrobeItem?.Image?.ImageUrl!;
        }

    }

    private async Task<WardrobeItem?> submitItem()
    {
        if (WardrobeItem != null)
        {
            var response = await client.PostAsJsonAsync("/api/wardrobe/item", WardrobeItem);
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<WardrobeItem>();
            }
            else
            {
                Console.WriteLine("Item add failed");
            }

        }

        return null;
    }

    private async Task UpdateItem()
    {
        if (WardrobeItem != null)
        {
            var response = await client.PutAsJsonAsync($"/api/wardrobe/item", WardrobeItem);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Item updated successfully");
            }
            else
            {
                Console.WriteLine("Item update failed");
            }
        }
    }

    private async Task UpdateImage()
    {
        if (selectedFile != null)
        {
            var imageContent = new MultipartFormDataContent();
            imageContent.Add(new StreamContent(selectedFile.OpenReadStream(selectedFile.Size)), selectedFile.Name, selectedFile.Name);
            var response = await client.PostAsync($"https://localhost:7103/api/wardrobe/item/{Id}/Image", imageContent);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Image uploaded successfully");
            }
            else
            {
                Console.WriteLine("Image upload failed");
            }
        }

    }



    private async Task submitImage(WardrobeItem item)
    {
        if (selectedFile != null)
        {
            var imageContent = new MultipartFormDataContent();
            imageContent.Add(new StreamContent(selectedFile.OpenReadStream(selectedFile.Size)), selectedFile.Name, selectedFile.Name);
            var response = await client.PostAsync($"/api/wardrobe/item/{item.Id}/Image", imageContent);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Image uploaded successfully");
            }
            else
            {
                Console.WriteLine("Image upload failed");
            }
        }
    }


    private async Task submit()
    {
        var item = await submitItem();
        if (item != null)
        {
            await submitImage(item);
        }

        navigationManager.NavigateTo("/new-wardrobe");
    }

    private async Task update()
    {
        try{
            await UpdateItem();
            await UpdateImage();

            navigationManager.NavigateTo("/new-wardrobe");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
       
    }

}
